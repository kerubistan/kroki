package io.github.kerubistan.kroki.ioimport java.io.InputStreamclass ConcatenatedInputStream(inputStreams: Iterable<InputStream>) : InputStream() {	private val iterator = inputStreams.iterator()	private var currentInputStream: InputStream? = null	companion object {		const val EOF = -1	}	override fun read(): Int {		if (currentInputStream == null) {			if (!tryNextInputStream()) {				return EOF			}			return read()		} else {			val value = currentInputStream!!.read()			if (value == EOF) {				if (!tryNextInputStream()) {					return EOF				}				return read()			}			return value		}	}	private fun tryNextInputStream(): Boolean = if (iterator.hasNext()) {		currentInputStream = iterator.next()		true	} else false}